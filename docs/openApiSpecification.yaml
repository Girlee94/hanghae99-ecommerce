openapi: 3.0.3
info:
  title: E-commerce Order Service API
  description: |
    상품 주문, 결제, 잔액 관리, 인기 상품 조회를 위한 API 명세서입니다.
    - **잔액 관리**: 사용자 잔액을 충전하고 조회합니다.
    - **상품 조회**: 판매 중인 상품 목록과 재고를 조회합니다.
    - **쿠폰 기능**: 선착순 쿠폰을 발급받고, 발급받은 쿠폰을 조회합니다. 상품 주문 시 사용합니다.
    - **주문 및 결제**: 상품을 주문하고 충전된 잔액으로 결제합니다.
    - **인기 상품 추천**: 최근 3일간 가장 많이 팔린 상품 TOP 5를 조회합니다.
  version: 1.0.0

servers:
  - url: https://localhost:8080/ecommerce
    description: Local Server

tags:
  - name: Balance
    description: 잔액 관리 API
  - name: Product
    description: 상품 정보 API
  - name: Coupon
    description: 쿠폰 관련 API
  - name: Order
    description: 주문 및 결제 API

paths:
  # 1. 잔액 충전 / 조회 API
  /balance/{userId}:
    get:
      summary: 사용자 잔액 조회
      tags: [Balance]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 잔액 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBalanceResponse'
        '404':
          description: 요청에 필요한 리소스를 찾을 수 없습니다.
            - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "USER_NOT_FOUND"
                message: "해당 사용자를 찾을 수 없습니다."

  /balance/{userId}/charge:
    post:
      summary: 사용자 잔액 충전
      tags: [Balance]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeBalanceRequest'
      responses:
        '200':
          description: 잔액 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBalanceResponse'
        '400':
          description: 잘못된 요청
            - 입력값이 유효하지 않습니다. ('INVALID_INPUT')
            - 금액은 0보다 커야합니다. ('NEGATIVE_AMOUNT')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "INVALID_INPUT"
                message: "입력값이 유효하지 않습니다."
        '404':
          description: 요청에 필요한 리소스를 찾을 수 없습니다.
            - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "USER_NOT_FOUND"
                message: "해당 사용자를 찾을 수 없습니다."

  /balance/{userId}/use:
    post:
        summary: 사용자 잔액 차감
        tags: [Balance]
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
              example: 1
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UseBalanceRequest'
        responses:
          '200':
            description: 잔액 차감 성공
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserBalanceResponse'
          '400':
            description: 잘못된 요청
              - 입력값이 유효하지 않습니다. ('INVALID_INPUT')
              - 금액은 0보다 커야합니다. ('NEGATIVE_AMOUNT')
              - 잔액이 부족합니다. ('INSUFFICIENT_BALANCE')
            content:
              appllication/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                example:
                  errorCode: "INVALID_INPUT"
                  message: "입력값이 유효하지 않습니다."
          '404':
            description: 요청에 필요한 리소스를 찾을 수 없습니다.
              - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
            content:
              appllication/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                example:
                  errorCode: "USER_NOT_FOUND"
                  message: "해당 사용자를 찾을 수 없습니다."
          '409':
            description: 상태 충돌 요청
              - 잔액이 부족합니다. ('INSUFFICIENT_FUNDS')
            content:
              appllication/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
                example:
                  errorCode: "INSUFFICIENT_FUNDS"
                  message: "잔액이 부족합니다."

  # 2. 상품 조회 API
  /products/list:
    get:
      summary: 상품 목록 조회
      description:
        전체 상품 목록을 조회합니다.
        **`quantity`(잔여수량) 필드는 실시간 재고를 반영하므로, 조회 시점의 정확한 수량을 나타냅니다.** 
        단, 다른 사용자의 주문에 의해 수량은 실시간으로 변동될 수 있으므로 결제 시점에는 재고가 부족할 수 있습니다.
      tags: [Product]
      parameters:
        - in: query
          name: filter
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/ProductListFilter'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductListResponse'

  /products/popular:
    get:
      summary: 인기 상품 TOP 5 조회 (최근 3일)
      tags: [Product]
      responses:
        '200':
          description: 인기 상품 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductListResponse'

  # 3. 선착순 쿠폰 기능 API
  /coupons/issue:
    post:
      summary: 선착순 쿠폰 발급
      tags: [Coupon]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  description: 쿠폰을 발급받을 사용자 ID
                  example: 1
                couponId:
                  type: integer
                  description: 발급할 쿠폰 ID
                  example: 101
      responses:
        '200':
          description: 쿠폰 발급 성공
        '404':
          description: 요청에 필요한 리소스를 찾을 수 없습니다.
            - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
            - 해당 쿠폰을 찾을 수 없습니다. ('COUPON_NOT_FOUND')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "USER_NOT_FOUND"
                message: "해당 사용자를 찾을 수 없습니다."
        '409':
          description: 상태 충돌 요청
            - 이미 쿠폰을 발급 받으셨습니다. ('COUPON_ALREADY_ISSUED')
            - 선착순 쿠폰이 모두 소진되었습니다. ('COUPON_SOLD_OUT')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "COUPON_ALREADY_ISSUED"
                message: "이미 쿠폰을 발급 받으셨습니다."

  /coupons/{userId}:
    get:
      summary: 보유 쿠폰 목록 조회
      tags: [Coupon]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - in: query
          name: filter
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/CouponListRequest'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: 보유 쿠폰 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CouponListResponse'
        '404':
          description: 요청에 필요한 리소스를 찾을 수 없습니다.
            - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
            - 해당 쿠폰을 찾을 수 없습니다. ('COUPON_NOT_FOUND')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "USER_NOT_FOUND"
                message: "해당 사용자를 찾을 수 없습니다."

  # 4. 주문 / 결제 API
  /orders:
    post:
      summary: 상품 주문 및 결제
      tags: [Order]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: 주문 및 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 잘못된 요청
           - 쿠폰이 유효하지 않거나 만료되었습니다. ('INVALID_COUPON')
         content:
           appllication/json:
             schema:
               $ref: '#/components/schemas/ErrorResponse'
             example:
               errorCode: "INVALID_COUPON"
               message: "쿠폰이 유효하지 않거나 만료되었습니다."
        '404':
          description: 요청에 필요한 리소스를 찾을 수 없습니다.
            - 해당 사용자를 찾을 수 없습니다. ('USER_NOT_FOUND')
            - 해당 상품을 찾을 수 없습니다. ('PRODUCT_NOT_FOUND')
            - 해당 쿠폰을 찾을 수 없습니다. ('COUPON_NOT_FOUND')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "USER_NOT_FOUND"
                message: "해당 사용자를 찾을 수 없습니다."
        '409':
          description: 상태 충돌 요청
            - 상품의 재고가 부족합니다. ('INSUFFICIENT_STOCK')
            - 잔액이 부족합니다. ('INSUFFICIENT_FUNDS')
          content:
            appllication/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errorCode: "INSUFFICIENT_STOCK"
                message: "상품의 재고가 부족합니다."

# 재사용 가능한 컴포넌트 정의
components:
  parameters:
    Page:
      name: page
      in: query
      description: 조회할 페이지 번호
      required: false
      schema:
        type: integer
        default: 1
        minimum: 1
        example: 1
    PerPage:
      name: perPage
      in: query
      description: 한 페이지에 보여줄 항목 수
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
        example: 20

  schemas:
    # Balance Schemas
    BalanceTransactionRequest:
      type: object
      properties:
        amount:
          type: number
          description: 거래할 금액 (충전 또는 차감)
          example: 10000
          minimum: 1
      required:
        - amount

    ChargeBalanceRequest:
      description: 잔액 충전 요청 본문
      allOf:
        - $ref: '#/components/schemas/BalanceTransactionRequest'

    UseBalanceRequest:
      description: 잔액 차감 요청 본문
      allOf:
        - $ref: '#/components/schemas/BalanceTransactionRequest'

    UserBalanceResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        balance:
          type: number
          example: 100000

    # Product Schema
    ProductListResponse:
      type: object
      properties:
        id:
          type: integer
          description: 상품 ID
          example: 1
        name:
          type: string
          description: 상품명
          example: "프리미엄 원두 커피"
        price:
          type: number
          description: 상품 가격
          example: 15000
        quantity:
          type: integer
          description: "조회 시점의 실시간 잔여 수량. 이 값은 다른 주문에 의해 실시간으로 변경될 수 있습니다."
          example: 100
        productType:
          type: string
          description: 상품 유형 (커피, 굿즈, 장비)
          example: "커피"
        productCategory:
          type: string
          description: 상품 세부 구분 (원두, 캡슐, 드립백)
          example: "원두"
      required:
        - id
        - name
        - price
        - quantity
        - productType
        - productCategory

    # Coupon Schema
    CouponListRequest:
      type: object
      properties:
        name:
          type: string
          description: 쿠폰 이름
          example: "10% 할인"
        expireAt:
          type: string
          description: 유효 쿠폰 여부
          example: "Y"

    CouponListResponse:
      type: object
      properties:
        id:
          type: integer
          example: 101
        name:
          type: string
          example: "10% 할인 쿠폰"
        discountRate:
          type: number
          format: float
          example: 0.1
        expireDate:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"

    # Order Schemas
    OrderRequest:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
            required:
              - productId
              - quantity
        couponId:
          type: integer
          description: 사용할 쿠폰 ID (선택 사항)
          example: 101
      required:
        - userId
        - products

    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          example: 1001
        userId:
          type: integer
          example: 1
        totalPrice:
          type: number
          example: 27000
        balance:
          type: number
          example: 13000
        createdAt:
          type: string
          format: date-time
          example: "2025-08-15T10:30:00Z"

    # Common Schemas
    ProductListFilter:
      type: Object
      properties:
        productId:
          type: integer
          description: 특정 상품 ID로 조회
          example: 1
        productType:
          type: string
          description: 상품 유형으로 필터링
          example: "커피"
        productCategory:
          type: string
          description: 상품 세부 구분으로 필터링
          example: "원두"

    # ErrorResponse Schemas
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: 서버 정의 에러 코드
          example: "NEGATIVE_AMOUNT"
        message:
          type: string
          description: 서버 정의 에러 메시지
          example: "금액은 0보다 커야 합니다."

  
